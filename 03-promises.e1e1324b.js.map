{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,OAAQJ,SAASC,cAAc,mBAC/BI,kBAAmBL,SAASC,cAAc,0BA0B5C,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAc,C,SAAEL,E,MAAUC,GAC1BK,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFH,EAAQE,GACDD,EAAOC,KACfJ,MAhCPV,EAAKC,KAAKkB,iBAAiB,UAE3B,SAAyBC,GACvBA,EAAIC,iBAEJ,IAAIC,EAAkBC,OAAOvB,EAAKI,WAAWoB,OAC7C,MAAMC,EAAiBF,OAAOvB,EAAKK,UAAUmB,OACvCE,EAAcH,OAAOvB,EAAKM,OAAOkB,OAEvC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,IAChCnB,EAAcmB,EAAGL,GACdM,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBZ,EAAA+B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAW,CAAIqB,SAAS,OAE9EC,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBZ,EAAA+B,OAAOI,QAAQ,sBAAoBxB,QAAeC,MAAW,CAAIqB,SAAS,OAE9ET,GAAmBG","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  stepDelay: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  createPromisesBtn: document.querySelector('button[type=\"submit\"]'),\n}\n\nrefs.form.addEventListener('submit', onHandlerSubmit);\n\nfunction onHandlerSubmit(evt) {\n  evt.preventDefault();\n  \n  let firstDelayValue = Number(refs.firstDelay.value);\n  const stepDelayValue = Number(refs.stepDelay.value);\n  const amountValue = Number(refs.amount.value);\n\n  for (let i = 1; i <= amountValue; i++){\n    createPromise(i, firstDelayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { useIcon: false });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { useIcon: false });\n      });\n    firstDelayValue += stepDelayValue;\n    \n  };\n\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const promiseProp = { position, delay };\n    const shouldResolve = Math.random() > 0.3;\n  \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(promiseProp);\n      } else { reject(promiseProp); }\n    }, delay);\n  \n  });\n  \n};"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","firstDelay","stepDelay","amount","createPromisesBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","promiseProp","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","firstDelayValue","Number","value","stepDelayValue","amountValue","i","then","Notify","success","useIcon","catch","failure"],"version":3,"file":"03-promises.e1e1324b.js.map"}